---
import Breadcrumb from "@/components/Breadcrumb.astro";
import Layout from "@/layouts/Layout.astro";
import { SITE } from "@/config";

export interface Props {
  frontmatter: {
    title: string;
    description?: string;
  };
}
---

<Layout title={`Game | ${SITE.title}`}>
  <Breadcrumb class="font-bold" />
  <div class="game-container">
    <h1>üè† What's In My House?</h1>
    <p class="subtitle">Guess the household item with progressive hints!</p>

    <div class="word-display" id="wordDisplay"></div>

    <div class="hint-section" id="hintSection">
      <div class="hint-title">üí° Hints:</div>
      <div id="hintsContainer"></div>
    </div>

    <div class="stats">
      <div class="stat">
        <div class="stat-number" id="guessesLeft">6</div>
        <div class="stat-label">Guesses Left</div>
      </div>
      <div class="stat">
        <div class="stat-number" id="hintsLeft">2</div>
        <div class="stat-label">Hints Left</div>
      </div>
    </div>

    <div class="input-section">
      <input
        type="text"
        class="guess-input"
        id="guessInput"
        placeholder="Enter your guess..."
        maxlength="20"
      />
      <button class="guess-button" id="guessButton"> Guess </button>
    </div>

    <div class="guesses-list" id="guessesList" style="display: none">
      <strong>Previous Guesses:</strong>
      <div id="guessesContainer"></div>
    </div>

    <div id="gameMessage"></div>
  </div>
</Layout>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #333;
  }

  .game-container {
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    padding: 40px;
    max-width: 500px;
    width: 90%;
    text-align: center;
    position: relative;
    overflow-y: auto; /* Make entire container scrollable */
    max-height: 90vh; /* Prevent container from growing too large */
  }

  .game-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 5px;
    background: linear-gradient(90deg, #667eea, #764ba2);
  }

  h1 {
    color: #4a5568;
    margin-bottom: 10px;
    font-size: 2em;
  }

  .difficulty-selector {
    margin: 20px 0;
    padding: 15px;
    background: #f7fafc;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  .difficulty-selector label {
    font-weight: bold;
    color: #4a5568;
  }

  .difficulty-selector select {
    padding: 8px 12px;
    border: 2px solid #e2e8f0;
    border-radius: 5px;
    background: white;
    font-size: 1em;
  }

  .word-display {
    font-size: 2.5em;
    font-family: "Courier New", monospace;
    letter-spacing: 8px;
    margin: 30px 0;
    color: #2d3748;
    font-weight: bold;
  }

  .hint-section {
    background: linear-gradient(135deg, #f7fafc, #edf2f7);
    border-radius: 15px;
    padding: 20px;
    margin: 20px 0;
    border-left: 4px solid #667eea;
  }

  .hint-title {
    font-weight: bold;
    color: #4a5568;
    margin-bottom: 10px;
  }

  .hint-text {
    font-size: 1.1em;
    color: #2d3748;
    font-style: italic;
    margin-bottom: 10px;
    padding: 8px;
    background: white;
    border-radius: 8px;
  }

  .hint-text:last-child {
    margin-bottom: 0;
  }

  /* Fixed CSS classes - moved outside of any nested selectors and made more specific */
  :global(.missed-letter) {
    color: #e53e3e !important;
    font-weight: bold !important;
  }

  :global(.correct-letter) {
    color: #28c73d !important;
    font-weight: bold !important;
  }

  .input-section {
    margin: 30px 0;
  }

  .guess-input {
    padding: 15px 20px;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1.1em;
    width: 70%;
    margin-right: 10px;
    transition: border-color 0.3s ease;
  }

  .guess-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .guess-button {
    padding: 15px 25px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1.1em;
    cursor: pointer;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  .guess-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
  }

  .guess-button:disabled {
    background: #a0aec0;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .stats {
    display: flex;
    justify-content: space-around;
    background: #f7fafc;
    border-radius: 10px;
    padding: 15px;
    margin: 20px 0;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    font-size: 1.5em;
    font-weight: bold;
    color: #667eea;
  }

  .stat-label {
    font-size: 0.9em;
    color: #718096;
  }

  .guesses-list {
    background: #f7fafc;
    border-radius: 10px;
    padding: 15px;
    margin: 20px 0;
    text-align: left;
  }

  /* Remove scrolling from guesses container - let the whole game container scroll */
  #guessesContainer {
    margin-top: 10px;
  }

  .guess-item {
    padding: 8px;
    margin: 5px 0;
    background: white;
    border-radius: 5px;
    border-left: 3px solid #e53e3e;
  }

  .win-message,
  .lose-message {
    font-size: 1.3em;
    padding: 20px;
    border-radius: 10px;
    margin: 20px 0;
  }

  :global(.win-message) {
    background: linear-gradient(135deg, #c6f6d5, #9ae6b4);
    color: #22543d;
    border-radius: 5px;
    padding: 20px;
  }

  :global(.lose-message) {
    background: linear-gradient(135deg, #fed7d7, #feb2b2);
    color: #742a2a;
    border-radius: 5px;
    padding: 20px;
  }

  /* Toast message styles */
  :global(.toast) {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(135deg, #fed7d7, #feb2b2);
    color: #742a2a;
    padding: 12px 20px;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    font-weight: 500;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    max-width: 90%;
    text-align: center;
  }

  :global(.toast.show) {
    opacity: 1;
  }

  :global(.toast.hide) {
    opacity: 0;
  }

  @media (max-width: 600px) {
    .game-container {
      padding: 20px;
      max-height: 95vh; /* Slightly higher on mobile */
    }

    .word-display {
      font-size: 2em;
      letter-spacing: 4px;
    }

    .guess-input {
      width: 100%;
      margin-bottom: 10px;
    }
  }
</style>

<script>
  // Daily game state
  let currentItem: any = {};
  let guessesRemaining = 6;
  let hintsRemaining = 2;
  let currentHintIndex = 0;
  let gameOver = false;
  let previousGuesses: any[] = [];
  let revealedLetters: any[] = [];
  let gameInitialized = false;
  let wordFetched = false; // Flag to prevent multiple API calls
  let winStreak = 0;

  function getTodayDateString() {
    return new Date().toDateString();
  }

  function loadWinStreak() {
    const savedStreak = localStorage.getItem("winStreak");
    winStreak = savedStreak ? Number(savedStreak) : 0;
  }

  function saveWinStreak() {
    localStorage.setItem("winStreak", `${winStreak}`);
  }

  // Show toast message
  function showToast(message: string) {
    // Remove any existing toast
    const existingToast = document.querySelector(".toast");
    if (existingToast) {
      existingToast.remove();
    }

    // Create new toast
    const toast = document.createElement("div");
    toast.className = "toast";
    toast.textContent = message;
    document.body.appendChild(toast);

    // Show toast with animation
    setTimeout(() => {
      toast.classList.add("show");
    }, 10);

    // Hide and remove toast after 3 seconds
    setTimeout(() => {
      toast.classList.remove("show");
      toast.classList.add("hide");
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, 3000);
  }

  // Update win streak and handle streak logic
  function updateWinStreak(streak: number) {
    if (checkStreakUpdatedToday()) {
      return;
    }

    winStreak = streak;

    saveWinStreak();
    markStreakUpdatedToday();
  }

  function checkStreakUpdatedToday() {
    const today = getTodayDateString();
    const lastStreakUpdate = localStorage.getItem("lastStreakUpdate");
    return lastStreakUpdate === today;
  }

  // Mark that streak has been updated today
  function markStreakUpdatedToday() {
    const today = getTodayDateString();
    localStorage.setItem("lastStreakUpdate", today);
  }

  // Check if user has already played today
  function checkDailyPlayStatus() {
    const today = getTodayDateString();
    const lastPlayDate = localStorage.getItem("lastPlayDate");
    const gameState = localStorage.getItem("dailyGameState");

    if (lastPlayDate === today && gameState) {
      // User already played today, restore their game state
      const state = JSON.parse(gameState);
      currentItem = state.currentItem;
      guessesRemaining = state.guessesRemaining;
      hintsRemaining = state.hintsRemaining;
      currentHintIndex = state.currentHintIndex;
      gameOver = state.gameOver;
      previousGuesses = state.previousGuesses || []; // Fixed: ensure array fallback
      revealedLetters =
        state.revealedLetters ||
        new Array(state.currentItem.word.length).fill(false);
      return true;
    }
    return false;
  }

  // Save current game state
  function saveDailyGameState() {
    const today = getTodayDateString();
    const gameState = {
      currentItem,
      guessesRemaining,
      hintsRemaining,
      currentHintIndex,
      gameOver,
      previousGuesses,
      revealedLetters,
    };

    localStorage.setItem("lastPlayDate", today);
    localStorage.setItem("dailyGameState", JSON.stringify(gameState));
  }

  // Fetch today's word from your API
  async function fetchTodaysWord() {
    const now = new Date();
    const easternTime = new Date(
      now.toLocaleString("en-US", { timeZone: "America/New_York" })
    );

    const year = easternTime.getFullYear();
    const month = String(easternTime.getMonth() + 1).padStart(2, "0");
    const day = String(easternTime.getDate()).padStart(2, "0");
    const datestring = `${year}-${month}-${day}`;

    try {
      const response = await fetch(
        `https://www.jakewaggoner.com/api/get-word?d=${datestring}`
      );
      const data = await response.json();
      return data.word;
    } catch (error) {
      console.error("Error fetching daily word:", error);
    }
  }

  async function checkWordExists(guess: string) {
    try {
      const response = await fetch(`/api/check-word?q=${guess}`);
      const data = await response.json();
      return data.exists;
    } catch (error) {
      console.error("Error fetching daily word:", error);
    }
  }

  async function initGame() {
    // Prevent multiple initializations
    if (gameInitialized) {
      return;
    }

    loadWinStreak();

    // Check if user already played today
    if (checkDailyPlayStatus()) {
      // Restore previous game state
      updateWordDisplay();
      updateStats();
      updateHint();

      // Show guesses list if there are previous guesses
      if (previousGuesses && previousGuesses.length > 0) {
        const guessesList = document.getElementById("guessesList");
        if (guessesList) {
          guessesList.style.display = "block";
        }
        updateGuessesList();
      }

      if (gameOver) {
        if (previousGuesses.some(guess => guess === currentItem.word)) {
          winGame();
        } else {
          loseGame();
        }
      } else {
        // If game is not over, don't call updateUI() which hides the guesses
        const guessInput = document.getElementById(
          "guessInput"
        ) as HTMLInputElement;
        const guessButton = document.getElementById(
          "guessButton"
        ) as HTMLButtonElement;

        if (guessInput) {
          guessInput.disabled = false;
          guessInput.focus();
        }
        if (guessButton) {
          guessButton.disabled = false;
        }
      }
      gameInitialized = true;
      return;
    }

    // Only fetch word if we haven't already
    if (!wordFetched) {
      currentItem = await fetchTodaysWord();
      wordFetched = true;
    }

    // Reset game state for new day
    guessesRemaining = 6;
    hintsRemaining = 2;
    currentHintIndex = 0;
    gameOver = false;
    previousGuesses = [];
    revealedLetters = new Array(currentItem.word.length).fill(false);

    saveDailyGameState();

    // Update display
    updateWordDisplay();
    updateStats();
    updateHint();
    updateUI();

    gameInitialized = true;
  }

  function updateUI() {
    // Clear previous game elements only for new games
    const guessInput = document.getElementById(
      "guessInput"
    ) as HTMLInputElement;
    const gameMessage = document.getElementById("gameMessage");
    const guessesList = document.getElementById("guessesList");
    const guessesContainer = document.getElementById("guessesContainer");
    const guessButton = document.getElementById(
      "guessButton"
    ) as HTMLButtonElement;

    if (gameMessage) {
      gameMessage.innerHTML = "";
    }

    // Only hide guesses list and clear container for completely new games
    if (previousGuesses.length === 0) {
      if (guessesList) {
        guessesList.style.display = "none";
      }
      if (guessesContainer) {
        guessesContainer.innerHTML = "";
      }
    }

    if (guessInput) {
      guessInput.disabled = gameOver;
      guessInput.value = "";
    }
    if (guessButton) {
      guessButton.disabled = gameOver;
    }

    if (!gameOver && guessInput) {
      guessInput.focus();
    }
  }

  function updateWordDisplay() {
    if (!currentItem.word) return;

    const display = currentItem.word
      .split("")
      .map((letter: any, index: number) => {
        if (revealedLetters[index]) {
          return `<span class="correct-letter">${letter}</span>`;
        } else if (gameOver && guessesRemaining === 0) {
          // Show missed letters in red when out of guesses
          return `<span class="missed-letter">${letter}</span>`;
        } else {
          return "_";
        }
      })
      .join(" ");
    const wordDisplay = document.getElementById("wordDisplay");
    if (wordDisplay) {
      wordDisplay.innerHTML = display;
    }
  }

  function updateStats() {
    const guessesLeft = document.getElementById("guessesLeft");
    const hintsLeft = document.getElementById("hintsLeft");
    if (guessesLeft) {
      guessesLeft.textContent = `${guessesRemaining}`;
    }
    if (hintsLeft) {
      hintsLeft.textContent = `${hintsRemaining}`;
    }
  }

  function updateHint() {
    const hintsContainer = document.getElementById("hintsContainer");
    if (hintsContainer) {
      // Clear existing hints
      hintsContainer.innerHTML = "";

      // Show all hints that have been revealed so far
      for (
        let i = 0;
        i <= currentHintIndex && i < currentItem.hints.length;
        i++
      ) {
        const hintDiv = document.createElement("div");
        hintDiv.className = "hint-text";
        hintDiv.textContent = `${i + 1}. ${currentItem.hints[i]}`;
        hintsContainer.appendChild(hintDiv);
      }

      // If no hints yet, show placeholder
      if (currentHintIndex === -1) {
        hintsContainer.innerHTML =
          '<div class="hint-text">Make your first guess to get a hint!</div>';
      }
    }
  }

  async function makeGuess() {
    if (gameOver) return;

    const guessInput = document.getElementById(
      "guessInput"
    ) as HTMLInputElement;
    const guess = guessInput.value.trim().toUpperCase();
    if (!guess) return;

    if (guess.length < currentItem.word.length) {
      showToast(`Word is too short!`);
      return;
    } else if (guess.length > currentItem.word.length) {
      showToast(`Word is too long!`);
      return;
    }

    const wordExists = await checkWordExists(guess);
    if (wordExists === false) {
      showToast(`Word not found!`);
      return;
    }

    // Add to previous guesses
    previousGuesses.push(guess);
    updateGuessesList();

    // Check for correct letters in correct positions
    if (guess !== currentItem.word) {
      for (
        let i = 0;
        i < Math.min(guess.length, currentItem.word.length);
        i++
      ) {
        if (guess[i] === currentItem.word[i] && !revealedLetters[i]) {
          revealedLetters[i] = true;
        }
      }
      updateWordDisplay();
    }

    // Check if correct
    if (guess === currentItem.word) {
      // Reveal all letters for complete word
      revealedLetters = new Array(currentItem.word.length).fill(true);
      updateWordDisplay();
      winGame();
      saveDailyGameState();
      return;
    }

    // Reduce guesses
    guessesRemaining--;

    // Give hints on specific guess numbers (1st, 3rd, 5th)
    const guessNumber = 7 - guessesRemaining;
    if (
      (guessNumber === 1 || guessNumber === 3 || guessNumber === 5) &&
      hintsRemaining > 0 &&
      currentHintIndex + 1 < currentItem.hints.length
    ) {
      hintsRemaining--;
      currentHintIndex++;
      updateHint();
    }

    updateStats();
    saveDailyGameState();

    // Check if game over
    if (guessesRemaining === 0) {
      loseGame();
      saveDailyGameState();
      return;
    }

    // Clear input
    if (guessInput) {
      guessInput.value = "";
      guessInput.focus();
    }
  }

  function updateGuessesList() {
    const guessesList = document.getElementById("guessesList");
    const guessesContainer = document.getElementById("guessesContainer");

    if (previousGuesses.length > 0 && guessesList && guessesContainer) {
      guessesList.style.display = "block";
      guessesContainer.innerHTML = previousGuesses
        .map(guess => `<div class="guess-item">${guess}</div>`)
        .join("");
    }
  }

  function winGame() {
    gameOver = true;
    updateWordDisplay();
    updateWinStreak(winStreak + 1);

    const gameMessage = document.getElementById("gameMessage");
    if (gameMessage) {
      const streakMessage =
        winStreak > 1 ? ` Win streak: ${winStreak}! üî•` : "";
      gameMessage.innerHTML = `<div class="win-message">üéâ Congratulations! You guessed <div style="font-weight:bold">${currentItem.word}</div> correctly!${streakMessage} Come back tomorrow to guess again!</div>`;
    }
    const guessInput = document.getElementById(
      "guessInput"
    ) as HTMLInputElement | null;
    if (guessInput) {
      guessInput.disabled = true;
    }

    const guessButton = document.getElementById(
      "guessButton"
    ) as HTMLInputElement | null;
    if (guessButton) {
      guessButton.disabled = true;
    }
  }

  function loseGame() {
    gameOver = true;
    updateWinStreak(0);

    // Don't change guessesRemaining - keep it at 0 to show user used all guesses
    updateWordDisplay(); // This will show missed letters in red
    const gameMessage = document.getElementById("gameMessage");
    if (gameMessage) {
      gameMessage.innerHTML = `<div class="lose-message">üòî Game Over! The answer was <div style="font-weight:bold">${currentItem.word}</div> Come back tomorrow for a new word!</div>`;
    }

    const guessInput = document.getElementById(
      "guessInput"
    ) as HTMLInputElement | null;
    if (guessInput) {
      guessInput.disabled = true;
    }

    const guessButton = document.getElementById(
      "guessButton"
    ) as HTMLInputElement | null;
    if (guessButton) {
      guessButton.disabled = true;
    }
  }

  function initializeGame() {
    // Check if the required elements exist (page is actually loaded)
    const guessInput = document.getElementById("guessInput");
    const guessButton = document.getElementById("guessButton");

    if (!guessInput || !guessButton) {
      // Elements not ready yet, try again shortly
      setTimeout(initializeGame, 100);
      return;
    }

    // Prevent multiple initializations
    if (gameInitialized) {
      return;
    }

    // Remove existing event listeners to prevent duplicates
    const newGuessInput = guessInput.cloneNode(true) as HTMLInputElement;
    const newGuessButton = guessButton.cloneNode(true) as HTMLButtonElement;

    guessInput.parentNode?.replaceChild(newGuessInput, guessInput);
    guessButton.parentNode?.replaceChild(newGuessButton, guessButton);

    // Enter key support
    newGuessInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        makeGuess();
      }
    });

    // Guess button click handler
    newGuessButton.addEventListener("click", makeGuess);

    // Initialize game
    initGame();
  }

  // Add event listeners - use only one primary method
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeGame);
  } else {
    // DOM already loaded
    initializeGame();
  }

  // For Astro view transitions only
  document.addEventListener("astro:page-load", function () {
    // Reset flags for new page load in SPA
    gameInitialized = false;
    wordFetched = false;
    initializeGame();
  });
</script>
